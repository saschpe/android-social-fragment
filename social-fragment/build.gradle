/*
 * Copyright 2017 Sascha Peilicke
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

plugins {
    id 'com.jfrog.bintray' version '1.8.4'
    id 'maven-publish'
}

def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.file) {
    Properties localProperties = new Properties()
    localPropertiesFile.withInputStream { localProperties.load(it) }
    localProperties.each { key, value ->
        properties.ext.set(key, value)
    }
}

apply plugin: 'com.android.library'

android {
    compileSdkVersion 28

    defaultConfig {
        minSdkVersion 17
        targetSdkVersion 28
        versionName '2.0.1'
    }

    buildTypes {
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    lintOptions {
        abortOnError false
    }
}

dependencies {
    // Runtime dependencies
    api 'androidx.appcompat:appcompat:1.0.2'
    api 'androidx.constraintlayout:constraintlayout:1.1.3'

    // Test dependencies
    testImplementation 'junit:junit:4.12'
    testImplementation 'org.robolectric:robolectric:3.8'
    testImplementation 'org.mockito:mockito-core:2.23.0'
}

group = 'saschpe.android'
version = android.defaultConfig.versionName

task androidJavadocs(type: Javadoc) {
    source = android.sourceSets.main.java.srcDirs
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
    android.libraryVariants.all { variant ->
        if (variant.name == 'release') {
            owner.classpath += variant.javaCompile.classpath
        }
    }
    exclude '**/R.html', '**/R.*.html', '**/index.html'
}

task androidJavadocsJar(type: Jar, dependsOn: androidJavadocs) {
    getArchiveClassifier().set("javadoc")
    from androidJavadocs.destinationDir
}

task androidSourcesJar(type: Jar) {
    getArchiveClassifier().set("sources")
    from android.sourceSets.main.java.srcDirs
}

publishing.publications {
    mavenAndroid(MavenPublication) {
        groupId
        artifactId project.name
        version this.version

        afterEvaluate { // https://groups.google.com/forum/#!topic/adt-dev/kzbEHAGbFVg
            artifact bundleReleaseAar
        }
        artifact androidJavadocsJar
        artifact androidSourcesJar

        pom.withXml {
            final dependenciesNode = asNode().appendNode('dependencies')

            ext.addDependency = { Dependency dep, String scope ->
                if (dep.group == null || dep.version == null || dep.name == null || dep.name == "unspecified")
                    return // ignore invalid dependencies

                final dependencyNode = dependenciesNode.appendNode('dependency')
                dependencyNode.appendNode('groupId', dep.group)
                dependencyNode.appendNode('artifactId', dep.name)
                dependencyNode.appendNode('version', dep.version)
                dependencyNode.appendNode('scope', scope)

                if (!dep.transitive) {
                    // If this dependency is transitive, we should force exclude all its dependencies them from the POM
                    final exclusionNode = dependencyNode.appendNode('exclusions').appendNode('exclusion')
                    exclusionNode.appendNode('groupId', '*')
                    exclusionNode.appendNode('artifactId', '*')
                } else if (!dep.properties.excludeRules.empty) {
                    // Otherwise add specified exclude rules
                    final exclusionNode = dependencyNode.appendNode('exclusions').appendNode('exclusion')
                    dep.properties.excludeRules.each { ExcludeRule rule ->
                        exclusionNode.appendNode('groupId', rule.group ?: '*')
                        exclusionNode.appendNode('artifactId', rule.module ?: '*')
                    }
                }
            }

            // List all "compile" dependencies (for old Gradle)
            configurations.compile.getAllDependencies().each { dep -> addDependency(dep, "compile") }
            // List all "api" dependencies (for new Gradle) as "compile" dependencies
            configurations.api.getAllDependencies().each { dep -> addDependency(dep, "compile") }
            // List all "implementation" dependencies (for new Gradle) as "runtime" dependencies
            configurations.implementation.getAllDependencies().each { dep -> addDependency(dep, "runtime") }
        }
    }
}

bintray {
    user = project.properties["bintray.user"]
    key = project.properties["bintray.apikey"]
    publications = ['mavenAndroid']
    configurations = ['archives']
    override = true
    pkg {
        repo = 'maven'
        name = 'android-social-fragment'
        userOrg = 'saschpe'
        websiteUrl = 'https://github.com/saschpe/android-social-fragment'
        issueTrackerUrl = 'https://github.com/saschpe/android-social-fragment/issues'
        vcsUrl = 'https://github.com/saschpe/android-social-fragment.git'
        licenses = ['Apache-2.0']
        desc = 'Social Network Fragment for Android.'
        labels = ['aar', 'android']
        publish = true
        publicDownloadNumbers = true

        githubRepo = 'saschpe/android-social-fragment'
        githubReleaseNotesFile = 'README.md'

        version {
            name = this.version
            desc = "${project.name} ${this.version}"
            released = new Date()
            vcsTag = this.version
            gpg {
                sign = true
            }
        }
    }
}