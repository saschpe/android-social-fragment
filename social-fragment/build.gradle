/*
 * Copyright 2017 Sascha Peilicke
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

plugins {
    id 'com.github.dcendents.android-maven' version '1.5'
    id 'com.jfrog.bintray' version '1.7.3'
}

def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.file) {
    Properties localProperties = new Properties()
    localPropertiesFile.withInputStream { localProperties.load(it) }
    localProperties.each { key, value ->
        properties.ext.set(key, value)
    }
}

apply plugin: 'com.android.library'

android {
    compileSdkVersion 26
    buildToolsVersion '26.0.2'

    defaultConfig {
        minSdkVersion 17
        targetSdkVersion 26
        versionName '1.0.3'
    }

    dataBinding {
        enabled = true
    }

    buildTypes {
        debug {
            consumerProguardFiles 'proguard-rules.pro'
        }
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            consumerProguardFiles 'proguard-rules.pro'
        }
    }

    lintOptions {
        abortOnError false
    }
}

dependencies {
    // Runtime dependencies
    compile 'com.android.support:appcompat-v7:26.1.0'
    compile 'com.android.support.constraint:constraint-layout:1.0.2'

    // Test dependencies
    testImplementation 'junit:junit:4.12'
    testImplementation 'org.robolectric:robolectric:3.4.2'
    testImplementation 'org.mockito:mockito-core:2.9.0'
}

group = 'saschpe.android'
version = android.defaultConfig.versionName

ext {
    siteUrl = 'https://github.com/saschpe/android-social-fragment'
    gitUrl = 'https://github.com/saschpe/android-social-fragment.git'
    descr = 'Social Network Fragment for Android.'
}

bintray {
    user = project.properties["bintray.user"]
    key = project.properties["bintray.apikey"]

    configurations = ['archives'] //When uploading configuration files
    pkg {
        repo = 'maven'
        name = 'android-social-fragment'
        userOrg = 'saschpe'
        websiteUrl = siteUrl
        issueTrackerUrl = 'https://github.com/saschpe/android-social-fragment/issues'
        vcsUrl = gitUrl
        licenses = ['Apache-2.0']
        desc = descr
        labels = ['aar', 'android']
        publish = true
        publicDownloadNumbers = true

        githubRepo = 'saschpe/android-social-fragment'
        githubReleaseNotesFile = 'README.md'

        version {
            name = android.defaultConfig.versionName
            desc = descr
            gpg {
                sign = true
            }
        }
    }
}

task createPom {
    pom {
        project {
            packaging 'aar'

            name project.name
            description descr
            url siteUrl
            inceptionYear '2017'

            licenses {
                license {
                    name 'The Apache Software License, Version 2.0'
                    url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                }
            }
            scm {
                connection gitUrl
                developerConnection gitUrl
                url siteUrl
            }
            developers {
                developer {
                    id 'saschpe'
                    name 'Sascha Peilicke'
                    email 'sascha@peilicke.de'
                }
            }
        }
    }.writeTo("$buildDir/poms/pom-default.xml").writeTo("pom.xml")
}
build.dependsOn createPom

task sourcesJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    classifier = 'sources'
}

task javadoc(type: Javadoc) {
    source = android.sourceSets.main.java.srcDirs
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
    failOnError false
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives javadocJar
    archives sourcesJar
}
